% Batch script to load a set of MPRender and ROI data files and
% calculate all relevant stats. See manuscript for general description of
% methodology and the "calculateSynapseResults.m" function for specific
% outputs. 
%
% All MPRender/MPstats and ROI files must be in one directory. Note this
% will take significantly longer to run on MPStats files that have not been
% converted to MPRender. Consider running convert_MPStatstoMPRender.m first
%
% Alex Settle & Miguel de Jesus
% Memorial Sloan Kettering Cancer Center
% Morgan Huse Laboratory, Department of Immunology
% 2023

%% Choose the directory containing all of the data, set options
file_path = uigetdir;
file_list = dir(file_path);

for i = 1:length(file_list)
    if isempty(strfind(file_list(i).name,'MPRender'))
           continue
    end
    disp(file_list(i).name)  
    file_name = file_list(i).name;
    index_match = strfind(file_name,'MPRender');
    match_2 = index_match(end);
    roi_filename = [file_name(1:match_2-1),'ROI',file_name(match_2+length('MPRender'):end)];

    MPhandle = load(fullfile(file_path,file_name));
    ROIhandle = load(fullfile(file_path,roi_filename));
    MPStats = MPhandle.MPStats;
    %to smooth any inconsistencies in variable naming
    roidata_Field = fieldnames(ROIhandle);
    roidata = ROIhandle.(roidata_Field{1});

    MP_size = size(MPStats,1);
    ROI_size = size(roidata,1);
    if MP_size ~= ROI_size
        error(['Error: MPStats and ROI do not match in size: ' )




end

[MPfile, MPfilepath] = uigetfile('.mat',"Choose the MPStats/MPRender File");
[ROIfile, ROIfilepath] = uigetfile('.mat',"Choose the MPStats/MPRender File");


MPStats = MPhandle.MPStats;
%to smooth any inconsistencies in variable naming
roidata_Field = fieldnames(ROIhandle);
roidata = ROIhandle.(roidata_Field{1});

synapseResults = calculateSynapseStats(MPStats,roidata);
generateSynapseResultsPage(MPStats,roidata,synapseResults);
outpng = strrep(MPStats.FileName,'.tif',' - ResultsOverview.png');
saveas(gcf,outpng)
close
outmat = strrep(MPStats.FileName,'.tif',' - ResultStuct.mat');
save(outmat,'synapseResults');